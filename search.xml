<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpirngBoot中E-mail与Velocity模板引擎的结合使用（一）</title>
      <link href="/2024/09/21/SpirngBoot%E4%B8%ADE-mail%E4%B8%8EVelocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/09/21/SpirngBoot%E4%B8%ADE-mail%E4%B8%8EVelocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SpirngBoot中E-mail与Velocity模板引擎的结合使用（一）"><a href="#SpirngBoot中E-mail与Velocity模板引擎的结合使用（一）" class="headerlink" title="SpirngBoot中E-mail与Velocity模板引擎的结合使用（一）"></a>SpirngBoot中E-mail与Velocity模板引擎的结合使用（一）</h1><p>在现代应用开发中，发送电子邮件是一个常见的需求。通过结合Spring Boot和Velocity模板引擎，我们可以轻松实现邮件的模板化发送。本文将详细介绍如何在Spring Boot中使用Velocity模板引擎发送电子邮件，并以QQ邮箱为例进行配置和演示。</p><h3 id="1-前置配置"><a href="#1-前置配置" class="headerlink" title="1.前置配置"></a>1.前置配置</h3><p>在开始之前，你需要有以下内容准备好：</p><ol><li><p><strong>QQ 邮箱账号</strong>：需要你拥有一个 QQ 邮箱，并且已经开启了<strong>SMTP服务</strong>。</p></li><li><p>SMTP授权码</p><p>：QQ 邮箱为了安全性，发送邮件需要使用授权码，而不是直接使用密码。获取授权码的方法如下：</p><ul><li>登录 QQ 邮箱网页版。</li><li>进入“设置” -&gt; “账户”，找到并开启<strong>POP3&#x2F;IMAP&#x2F;SMTP&#x2F;Exchange&#x2F;CardDAV&#x2F;CalDAV服务</strong>。</li><li>开启成功后，点击“生成授权码”，<strong>记下这个授权码</strong>，后续会用到。</li></ul></li></ol><p><img src="/boke_image/2024-09-11-171302.png" alt="2024-09-11 171302"></p><p>​<strong>注意:保存获得的密码</strong></p><h3 id="2-引入相关依赖"><a href="#2-引入相关依赖" class="headerlink" title="2.引入相关依赖"></a>2.引入相关依赖</h3><p>Spring Boot 提供了 <code>spring-boot-starter-mail</code> 这个依赖，它包含了我们发送邮件所需的所有内容。你需要在 <code>pom.xml</code> 文件中加入以下依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--表示依赖不会传递，即其它项目如引入此项目生成的jar包不会包含spring-boot-devtools--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--JDBC--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 发mail的依赖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 模板引擎 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-配置邮件属性"><a href="#3-配置邮件属性" class="headerlink" title="3.配置邮件属性"></a>3.配置邮件属性</h3><p>接下来，你需要在 <code>application.properties</code> 或者 <code>application.yml</code> 文件中配置 QQ 邮箱的 SMTP 服务器信息。</p><p><strong>使用 <code>application.properties</code> 文件：</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">com.zxb:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">org.springframework:</span> <span class="string">info</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否支持自动重启(热部署)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  profiles:</span></span><br><span class="line"><span class="comment">#    active: prod</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#设置监听源码变更的目录  -&gt;  这个目录中的文件变更后会自动重启</span></span><br><span class="line">      <span class="attr">additional-paths:</span> <span class="string">src/main/java</span></span><br><span class="line">      <span class="comment">#设置classpath目录下的WEB-INF目录下的文件不会被监听，修改不会自动重启</span></span><br><span class="line">      <span class="attr">exclude:</span> <span class="string">static/**</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/bank140?allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">****</span><span class="comment">#换成自己的账号密码</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>  <span class="comment">#特别指定数据源类型，默认是HikariCP，现在变成druid</span></span><br><span class="line">    <span class="comment"># 连接池配置</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment"># 初始化大小，最小，最大</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存时间</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="comment">#用来验证从连接池中取出的连接是否有效,test-while-idle 为 true，那么 validation-query 参数必须设置为非空字符串，否则会报错。</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br><span class="line">      <span class="comment">#如果设置为 true，则会在连接空闲时检查数据库连接是否仍然有效</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#申请连接时会执行validation-query检测是否有效，开启后，会有性能影响，默认为 true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment">#归还连接时会执行validation-query检测是否有效，开启后，会有性能影响，默认为 true</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 打开 PSCache，并且指定每个连接上 PSCache 的大小</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">-1</span></span><br><span class="line">      <span class="comment"># 配置监控统计拦截的 Filter，去掉后监控界面 SQL 无法统计，wall 用于防火墙</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">      <span class="comment"># 通过 connection-properties 属性打开 mergeSql 功能；慢 SQL 记录</span></span><br><span class="line">      <span class="attr">connection-properties:</span> <span class="string">druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000</span></span><br><span class="line">      <span class="comment"># 配置 DruidStatFilter</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="comment"># 是否启用 DruidStatFilter 默认值为 true</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 添加过滤规则，多个过滤规则使用逗号分隔</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="comment"># 忽略 SQL 中包含的 filter 规则</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*</span></span><br><span class="line">      <span class="comment"># 配置 DruidStatViewServlet</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="comment">#是否启用StatViewServlet默认值为true</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#访问路径为/druid/* , 跳转到StatViewServlet</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="comment"># IP 白名单，没有配置或者为空，则允许所有访问</span></span><br><span class="line">        <span class="attr">allow:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="comment"># IP 黑名单，若白名单也存在，则优先使用</span></span><br><span class="line">        <span class="attr">deny:</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.253</span></span><br><span class="line">        <span class="comment"># 禁用 HTML 中 Reset All 按钮</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 登录用户名/密码</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">****</span><span class="comment">#换成自己的账号密码</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">default-charset:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">*******@qq.com</span><span class="comment">#自己的qq</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">************</span><span class="comment">#刚刚保存的授权码</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">auth:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">socketFactory:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line">          <span class="attr">starttls:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">task:</span></span><br><span class="line">    <span class="attr">execution:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-pool-size:</span> <span class="number">16</span>   <span class="comment"># 线程池大小</span></span><br><span class="line">        <span class="attr">queue-capacity:</span> <span class="number">100</span>   <span class="comment"># 队列容量</span></span><br><span class="line">        <span class="attr">keep-alive:</span> <span class="string">&quot;10s&quot;</span>   <span class="comment"># 线程池空闲时间</span></span><br><span class="line">    <span class="comment"># 任务调度器</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#开启SQL语句打印</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-编写发送邮件的代码"><a href="#4-编写发送邮件的代码" class="headerlink" title="4.编写发送邮件的代码"></a>4.编写发送邮件的代码</h3><p>Spring Boot 让发送邮件变得非常简单，你只需要注入 <code>JavaMailSender</code> 并调用它的相关方法即可。下面是一个发送简单文本邮件的例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailBiz</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span> <span class="comment">//可以加在类上，  如果在类上，则所有方法都可以异步执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String to,String subject,String content)</span>&#123;</span><br><span class="line"><span class="comment">//        SimpleMailMessage message = new SimpleMailMessage();    //不包括附件</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">mm</span> <span class="operator">=</span> mailSender.createMimeMessage();    <span class="comment">//可以包括附件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作附件</span></span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mm,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            message.setFrom(from);  <span class="comment">//谁发</span></span><br><span class="line">            message.setTo(to);  <span class="comment">//谁收</span></span><br><span class="line">            message.setSubject(subject);<span class="comment">//标题</span></span><br><span class="line">            message.setText(content,<span class="literal">true</span>);<span class="comment">//内容,代表内容是html格式</span></span><br><span class="line"></span><br><span class="line">            mailSender.send(mm);<span class="comment">//发送</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;发送邮件失败:&quot;</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-启动类-App和AppMainConfig"><a href="#5-启动类-App和AppMainConfig" class="headerlink" title="5.启动类(App和AppMainConfig)"></a>5.启动类(App和AppMainConfig)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Application start!&quot;</span>);</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppMainConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-方法测试类"><a href="#6-方法测试类" class="headerlink" title="6.方法测试类"></a>6.方法测试类</h3><p><strong>注意:我使用的JUnit4</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = App.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailBizTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailBiz mailBiz;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//********换成自己的QQ邮件</span></span><br><span class="line">        mailBiz.send(<span class="string">&quot;********qq.com&quot;</span>,<span class="string">&quot;测试邮件&quot;</span>,<span class="string">&quot;没学了，躺平&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>通过以上步骤，你已经成功地在 Spring Boot 项目中集成了 QQ 邮箱的邮件发送功能。不管是简单文本邮件，还是复杂的 HTML 邮件，Spring Boot 都能轻松实现。此外，在实际应用中，你还可以进一步扩展，如添加附件、群发邮件、Velocity模板等。</p><p>希望本文能帮助你快速上手 QQ 邮箱的邮件发送功能，并将其应用到你的项目中。</p>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpirngBoot中E-mail与Velocity模板引擎的结合使用（二）</title>
      <link href="/2024/09/21/SpirngBoot%E4%B8%ADE-mail%E4%B8%8EVelocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/09/21/SpirngBoot%E4%B8%ADE-mail%E4%B8%8EVelocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="SpirngBoot中E-mail与Velocity模板引擎的结合使用（二）"><a href="#SpirngBoot中E-mail与Velocity模板引擎的结合使用（二）" class="headerlink" title="SpirngBoot中E-mail与Velocity模板引擎的结合使用（二）"></a>SpirngBoot中E-mail与Velocity模板引擎的结合使用（二）</h1><p>在SpirngBoot中E-mail与Velocity模板引擎的结合使用（一）的基础上引入Velocity模板以及策略模式。</p><p>Velocity 是 Apache 提供的一个轻量级模板引擎，支持将数据动态渲染到模板中，非常适合用于生成 HTML 内容。它的语法简单易懂，且与 Java 的集成非常流畅，因此常用于邮件内容的模板化生成。下面我已银行模式中的存款，取款，转账三个模板为例。</p><h3 id="1-项目依赖配置-在一种已经导入）"><a href="#1-项目依赖配置-在一种已经导入）" class="headerlink" title="1.项目依赖配置(在一种已经导入）"></a>1.项目依赖配置(在一种已经导入）</h3><h3 id="2-创建-Velocity-模板"><a href="#2-创建-Velocity-模板" class="headerlink" title="2.创建 Velocity 模板"></a>2.创建 Velocity 模板</h3><p>接下来，我们需要创建一个 Velocity 模板。假设我们要发送一封包含动态内容的 HTML 邮件，可以将模板文件保存在 <code>src/main/resources/vm/XXXXXX.vm</code> 目录下，文件内容如下：</p><p><strong>deposite.vm:</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>中国银行账户变动提示邮件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>发件人：中国银行衡阳支行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>收件人：$&#123;accountid&#125; $&#123;email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>主题：$&#123;subject&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>尊敬的 $&#123;accountid&#125;:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>正文：您的账户$&#123;accountid&#125;于$&#123;optime&#125;发一次<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>存款<span class="tag">&lt;/<span class="name">span</span>&gt;</span>操作，</span><br><span class="line">            存储金额为：<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>$&#123;money&#125;元<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，操作后账户余额为：$&#123;balance&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>祝好！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>中国银行衡阳支行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;currentDate&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>transfer.vm:</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>中国银行账户变动提示邮件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>发件人：中国银行衡阳支行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>收件人：$&#123;accountid&#125; $&#123;email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>主题：$&#123;subject&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>尊敬的 $&#123;accountid&#125;:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>正文：您的账户$&#123;accountid&#125;于$&#123;optime&#125;发一次<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>转账<span class="tag">&lt;/<span class="name">span</span>&gt;</span>操作，接收账户为：$&#123;toaccountid&#125;</span><br><span class="line">        转账金额为：<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>$&#123;money&#125;元<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，操作后账户余额为：$&#123;balance&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>祝好！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>中国银行衡阳支行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;currentDate&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>withdraw.vm:</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>中国银行账户变动提示邮件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>发件人：中国银行衡阳支行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>收件人：$&#123;accountid&#125; $&#123;email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>主题：$&#123;subject&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>尊敬的 $&#123;accountid&#125;:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>正文：您的账户$&#123;accountid&#125;于$&#123;optime&#125;发一次<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>取款<span class="tag">&lt;/<span class="name">span</span>&gt;</span>操作，</span><br><span class="line">        取出金额为：<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>$&#123;money&#125;元<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，操作后账户余额为：$&#123;balance&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>祝好！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>中国银行衡阳支行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;currentDate&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-相关类的创建-Account以及MessageBean"><a href="#3-相关类的创建-Account以及MessageBean" class="headerlink" title="3.相关类的创建(Account以及MessageBean)"></a>3.相关类的创建(Account以及MessageBean)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> account</span><br><span class="line">(</span><br><span class="line">    accountid <span class="type">int</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    balance   <span class="type">decimal</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">null</span>,</span><br><span class="line">    email     <span class="type">varchar</span>(<span class="number">800</span>)   <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">check</span> (`balance` <span class="operator">&gt;</span> <span class="number">0</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ManagedResource(objectName = &quot;a:type=Account&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@TableName(&quot;account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> accountid;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@ManagedAttribute</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAccountid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManagedOperation</span></span><br><span class="line">    <span class="meta">@ManagedOperationParameter(name=&quot;accountid&quot;,description = &quot;账户编码&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccountid</span><span class="params">(<span class="type">int</span> accountid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountid = accountid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ManagedAttribute</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ManagedOperation</span></span><br><span class="line">    <span class="meta">@ManagedOperationParameter(name=&quot;balance&quot;,description = &quot;账户的金额&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ManagedAttribute</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ManagedOperation</span></span><br><span class="line">    <span class="meta">@ManagedOperationParameter(name=&quot;email&quot;,description = &quot;账户的邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="keyword">private</span> Integer toaccountid;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//生产端这边发送的消息中多加一个列，用于表示操作的类型，这样在消费端就能根据这个列获取对应的邮件模板</span></span><br><span class="line">    <span class="keyword">private</span> String opType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-模板引擎配置类"><a href="#4-模板引擎配置类" class="headerlink" title="4.模板引擎配置类"></a>4.模板引擎配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VelocityConfig</span> &#123;</span><br><span class="line">    <span class="comment">//模板引擎配置</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> VelocityEngine <span class="title function_">velocityEngine</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">VelocityEngine</span> <span class="variable">velocityEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VelocityEngine</span>();</span><br><span class="line">        velocityEngine.setProperty(RuntimeConstants.RESOURCE_LOADER, <span class="string">&quot;classpath&quot;</span>);  <span class="comment">//设置从什么位置加载模板vm</span></span><br><span class="line">        velocityEngine.setProperty(<span class="string">&quot;classpath.resource.loader.class&quot;</span>, ClasspathResourceLoader.class.getName());</span><br><span class="line">        velocityEngine.init();</span><br><span class="line">        <span class="keyword">return</span> velocityEngine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模板引擎上下文</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> VelocityContext <span class="title function_">velocityContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VelocityContext</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Template <span class="title function_">depositeTemplate</span><span class="params">(<span class="meta">@Autowired</span> VelocityEngine velocityEngine)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> velocityEngine.getTemplate(<span class="string">&quot;vms/deposite.vm&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Template <span class="title function_">withdrawTemplate</span><span class="params">(<span class="meta">@Autowired</span> VelocityEngine velocityEngine)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> velocityEngine.getTemplate(<span class="string">&quot;vms/withdraw.vm&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Template <span class="title function_">transferTemplate</span><span class="params">(<span class="meta">@Autowired</span> VelocityEngine velocityEngine)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> velocityEngine.getTemplate(<span class="string">&quot;vms/transfer.vm&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DateFormat <span class="title function_">fullDf</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 hh:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DateFormat <span class="title function_">partDf</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日北京时间hh:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-使用策略模式"><a href="#5-使用策略模式" class="headerlink" title="5.使用策略模式"></a>5.使用策略模式</h3><p>邮件的策略接口:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmailContentStrategyService</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> String <span class="title function_">getEmailContent</span><span class="params">( Account account, <span class="type">double</span> money, <span class="type">int</span> toaccountid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>策略上下文:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,EmailContentStrategyService&gt; strategies;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StrategyContext</span><span class="params">(Map&lt;String,EmailContentStrategyService&gt; strategies)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.strategies = strategies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">executeStrategy</span><span class="params">(String opType, Account account, <span class="type">double</span> money, <span class="type">int</span> toaccountid)</span>&#123;</span><br><span class="line">        <span class="type">EmailContentStrategyService</span> <span class="variable">strategy</span> <span class="operator">=</span> strategies.get(opType);</span><br><span class="line">        <span class="keyword">if</span> (strategy == <span class="literal">null</span>)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;没有找到对应的策略:&quot;</span>+opType);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;没有找到对应的策略:&quot;</span>+opType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strategy.getEmailContent( account, money, toaccountid );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实现类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;deposite&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepositeEmailContentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmailContentStrategyService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VelocityEngine velocityEngine;  <span class="comment">//模板引擎</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VelocityContext context;    <span class="comment">//模板上下文</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;depositeTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Template depositeTemplate;     <span class="comment">//doposite.vm</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;fullDf&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DateFormat fullDf;  <span class="comment">//格式化对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;partDf&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DateFormat partDf;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmailContent</span><span class="params">(Account account, <span class="type">double</span> money, <span class="type">int</span> toaccountid)</span> &#123;</span><br><span class="line">        <span class="comment">//方案二：使用模板引擎读取 模板文件</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        context.put(<span class="string">&quot;accountid&quot;</span>,account.getAccountid());</span><br><span class="line">        context.put(<span class="string">&quot;email&quot;</span>,account.getEmail());</span><br><span class="line">        context.put(<span class="string">&quot;subject&quot;</span>,<span class="string">&quot;存款操作通知&quot;</span>);</span><br><span class="line">        context.put(<span class="string">&quot;optime&quot;</span>,fullDf.format(d));</span><br><span class="line">        context.put(<span class="string">&quot;money&quot;</span>,money);</span><br><span class="line">        context.put(<span class="string">&quot;balance&quot;</span>,account.getBalance());</span><br><span class="line">        context.put(<span class="string">&quot;currentDate&quot;</span>,partDf.format(d));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">StringWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();)&#123;</span><br><span class="line">            depositeTemplate.merge(context,writer);<span class="comment">//合并模板和上下文</span></span><br><span class="line">            <span class="keyword">return</span> writer.toString();<span class="comment">//从流获取最终的字符串</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;transfer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransferEmailContentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmailContentStrategyService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VelocityEngine velocityEngine;  <span class="comment">//模板引擎</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VelocityContext context;    <span class="comment">//模板上下文</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;transferTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Template transferTemplate;     <span class="comment">//transfer.vm</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;fullDf&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DateFormat fullDf;  <span class="comment">//格式化对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;partDf&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DateFormat partDf;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmailContent</span><span class="params">(Account account, <span class="type">double</span> money, <span class="type">int</span> toaccountid)</span> &#123;</span><br><span class="line">        <span class="comment">//方案二：使用模板引擎读取 模板文件</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">        context.put(<span class="string">&quot;accountid&quot;</span>,account.getAccountid());</span><br><span class="line">        context.put(<span class="string">&quot;email&quot;</span>,account.getEmail());</span><br><span class="line">        context.put(<span class="string">&quot;subject&quot;</span>,<span class="string">&quot;存款操作通知&quot;</span>);</span><br><span class="line">        context.put(<span class="string">&quot;optime&quot;</span>,fullDf.format(d));</span><br><span class="line">        context.put(<span class="string">&quot;money&quot;</span>,money);</span><br><span class="line">        context.put(<span class="string">&quot;balance&quot;</span>,account.getBalance());</span><br><span class="line">        context.put(<span class="string">&quot;currentDate&quot;</span>,partDf.format(d));</span><br><span class="line">        context.put(<span class="string">&quot;toacountid&quot;</span>,toaccountid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">StringWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();)&#123;</span><br><span class="line">            transferTemplate.merge(context,writer);<span class="comment">//合并模板和上下文</span></span><br><span class="line">            System.out.println(writer.toString());</span><br><span class="line">            <span class="keyword">return</span> writer.toString();<span class="comment">//从流获取最终的字符串</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;withdraw&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WithdrawEmailContentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmailContentStrategyService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VelocityEngine velocityEngine;  <span class="comment">//模板引擎</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VelocityContext context;    <span class="comment">//模板上下文</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;withdrawTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Template withdrawTemplate;     <span class="comment">//withdraw.vm</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;fullDf&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DateFormat fullDf;  <span class="comment">//格式化对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;partDf&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DateFormat partDf;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmailContent</span><span class="params">(Account account, <span class="type">double</span> money, <span class="type">int</span> toaccountid)</span> &#123;</span><br><span class="line">        <span class="comment">//方案二：使用模板引擎读取 模板文件</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">        context.put(<span class="string">&quot;accountid&quot;</span>,account.getAccountid());</span><br><span class="line">        context.put(<span class="string">&quot;email&quot;</span>,account.getEmail());</span><br><span class="line">        context.put(<span class="string">&quot;subject&quot;</span>,<span class="string">&quot;取款操作通知&quot;</span>);</span><br><span class="line">        context.put(<span class="string">&quot;optime&quot;</span>,fullDf.format(d));</span><br><span class="line">        context.put(<span class="string">&quot;money&quot;</span>,money);</span><br><span class="line">        context.put(<span class="string">&quot;balance&quot;</span>,account.getBalance());</span><br><span class="line">        context.put(<span class="string">&quot;currentDate&quot;</span>,partDf.format(d));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">StringWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();)&#123;</span><br><span class="line">            withdrawTemplate.merge(context,writer);<span class="comment">//合并模板和上下文</span></span><br><span class="line">            <span class="keyword">return</span> writer.toString();<span class="comment">//从流获取最终的字符串</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个配置，Velocity 模板引擎可以从 <code>src/main/resources/vm</code> 目录中加载模板。</p><h3 id="6-配置VelocityTemplateBizImpl"><a href="#6-配置VelocityTemplateBizImpl" class="headerlink" title="6.配置VelocityTemplateBizImpl"></a>6.配置VelocityTemplateBizImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VelocityTemplateBizImpl</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StrategyContext strategyContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmailContent</span><span class="params">(String opType, Account account, <span class="type">double</span> money, <span class="type">int</span> toaccountid)</span> &#123;</span><br><span class="line">        String info=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        info = strategyContext.executeStrategy(opType, account, money, toaccountid);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-调用Email邮件发送QQ邮件"><a href="#7-调用Email邮件发送QQ邮件" class="headerlink" title="7.调用Email邮件发送QQ邮件"></a>7.调用Email邮件发送QQ邮件</h3><p>现在我们已经完成了邮件服务的编写，接下来只需要在控制器或服务类中调用它。下面是一个简单的服务类示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JmsMessageConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailBiz mailBiz;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VelocityTemplateBizImpl velocityTemplateBizImpl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户接收的消息为: &quot;</span> + message);</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">MessageBean</span> <span class="variable">messageBean</span> <span class="operator">=</span> g.fromJson(message, MessageBean.class);<span class="comment">//将json字符串转换为MessageBean对象</span></span><br><span class="line">        <span class="comment">//产生要发送的邮件内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> velocityTemplateBizImpl.getEmailContent(messageBean.getOpType(),</span><br><span class="line">                messageBean.getAccount(), messageBean.getMoney(), messageBean.getToaccountid());</span><br><span class="line"></span><br><span class="line">        mailBiz.send(messageBean.getAccount().getEmail(), <span class="string">&quot;账户变动通知&quot;</span>,content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-使用测试类测试三个vm模块"><a href="#8-使用测试类测试三个vm模块" class="headerlink" title="8.使用测试类测试三个vm模块"></a>8.使用测试类测试三个vm模块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = App.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JmsMessageConsumerTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessageConsumer jmsMessageConsumer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span><span class="comment">//测试deposite存款操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage1</span><span class="params">()</span> &#123;</span><br><span class="line">        jmsMessageConsumer.receiveMessage(<span class="string">&quot;&#123;\&quot;account\&quot;:&#123;\&quot;accountid\&quot;:1,\&quot;balance\&quot;:3854718.0,\&quot;email\&quot;:\&quot;******@qq.com\&quot;&#125;,\&quot;money\&quot;:123.0,\&quot;toaccountid\&quot;:0,\&quot;email\&quot;:\&quot;******@qq.com\&quot;,\&quot;opType\&quot;:\&quot;transfer\&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span><span class="comment">//测试transfer转账操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage2</span><span class="params">()</span> &#123;</span><br><span class="line">        jmsMessageConsumer.receiveMessage(<span class="string">&quot;&#123;\&quot;account\&quot;:&#123;\&quot;accountid\&quot;:1,\&quot;balance\&quot;:3854718.0,\&quot;email\&quot;:\&quot;******@qq.com\&quot;&#125;,\&quot;money\&quot;:123.0,\&quot;toaccountid\&quot;:5,\&quot;email\&quot;:\&quot;******@qq.com\&quot;,\&quot;opType\&quot;:\&quot;transfer\&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span><span class="comment">//测试withdraw取款操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage3</span><span class="params">()</span> &#123;</span><br><span class="line">        jmsMessageConsumer.receiveMessage(<span class="string">&quot;&#123;\&quot;account\&quot;:&#123;\&quot;accountid\&quot;:1,\&quot;balance\&quot;:3854718.0,\&quot;email\&quot;:\&quot;******@qq.com\&quot;&#125;,\&quot;money\&quot;:123.0,\&quot;toaccountid\&quot;:0,\&quot;email\&quot;:\&quot;******@qq.com\&quot;,\&quot;opType\&quot;:\&quot;withdraw\&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中取款的效果图如下:</p><p><img src="/boke_image/2024-09-21-171800.png" alt="2024-09-21 171800"></p><h3 id="9-总结"><a href="#9-总结" class="headerlink" title="9.总结"></a>9.总结</h3><p>通过以上步骤，我们成功地在 Spring Boot 项目中集成了 Velocity 模板引擎，并实现了邮件发送功能。相比于纯文本邮件，使用模板引擎可以更加灵活地控制邮件的内容和格式。你可以根据实际需求进一步扩展，比如添加附件、发送多部分邮件等。</p><p>希望这篇文章对你有所帮助，让你能轻松上手使用 Velocity 和 Spring Boot 结合发送邮件的功能。如果你对 Velocity 或 Spring Boot 发送邮件有任何问题，欢迎留言讨论。</p>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot_OSS中图片的存储</title>
      <link href="/2024/09/09/springboot_OSS%E4%B8%AD%E5%9B%BE%E7%89%87%E7%9A%84%E5%AD%98%E5%82%A8/"/>
      <url>/2024/09/09/springboot_OSS%E4%B8%AD%E5%9B%BE%E7%89%87%E7%9A%84%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="OSS中图片的存储"><a href="#OSS中图片的存储" class="headerlink" title="OSS中图片的存储"></a>OSS中图片的存储</h1><p>在现代应用中，图片存储和管理是一个常见需求。阿里云对象存储服务（OSS）提供了高效、安全、可靠的图片存储解决方案。本文将详细介绍如何在OSS中存储图片，包括上传、管理和处理图片的步骤。</p><h3 id="1-申请和配置OSS"><a href="#1-申请和配置OSS" class="headerlink" title="1. 申请和配置OSS"></a>1. 申请和配置OSS</h3><p>首先，你需要在阿里云官网申请并配置OSS服务。具体步骤如下：</p><ol><li><p><strong>准备：</strong>阿里云账号，开通OSS服务(购买OSS资源包)</p></li><li><p><strong>创建Bucket</strong>：登录阿里云控制台，搜索“对象存储OSS”，创建一个新的Bucket。记录下Bucket名称、Endpoint、AccessKey ID和AccessKey Secret。</p><p><img src="/boke_image/2024-09-08-095913.png" alt=" 2024-09-08 095913"></p><p><img src="/boke_image/2024-09-08-100251.png" alt="2024-09-08 100251"></p><p><img src="/boke_image/2024-09-08-100911.png" alt="2024-09-08 100911"></p><p>点击主页头像 —&gt; AccessKey 管理  —&gt;  开始使用子用户AccessKey  —&gt;   创建用户</p><p><img src="/boke_image/2024-09-08-102639.png" alt="024-09-08 102639"></p><p>创建用户后<strong>一定要保存AccessKey ID和AccessKey Secret，一旦刷新就没了（注意）</strong></p><p><img src="/boke_image/2024-09-08-104111.png" alt="2024-09-08 104111"></p><p>如果忘记保存就点击用户进入，认证管理，创建新AccessKey ID和AccessKey Secret</p></li><li><p><strong>配置权限</strong>：根据需求配置Bucket的权限，可以选择公共读、公共读写或私有。</p><p><img src="/boke_image/2024-09-08-103619.png" alt="2024-09-08 103619"></p><h3 id="2-引入依赖"><a href="#2-引入依赖" class="headerlink" title="2.引入依赖"></a>2.引入依赖</h3><p>首先，在 <code>pom.xml</code> 文件中添加SpirngBoot3+MyBatis-Plus以及阿里云 OSS SDK 的相关依赖：</p><p><strong>项目结构：</strong></p><p><img src="/boke_image/2024-09-08.png" alt="2024-09-08 "></p><p><strong>父项目依赖：</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Mysql驱动包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- druid数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- dao层框架  mybatis plus --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- json工具包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>子项目(oss_springboot)：</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 简化bean的开发 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--因为要提供数据前台页面，所以导入web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring boot 测试框架--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springboot 开发者工具 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表示依赖不会传递，即其它项目如引入此项目生成的jar包不会包含spring-boot-devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springboot的配置文件处理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MySql驱动包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--阿里云oss依赖坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springboot 的构建工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、配置类以及配置信息-application-yml"><a href="#3、配置类以及配置信息-application-yml" class="headerlink" title="3、配置类以及配置信息(application.yml)"></a>3、配置类以及配置信息(application.yml)</h3><p><strong>配置信息(application.yml):</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">com.zxb:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">org.springframework:</span> <span class="string">info</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./logs</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#设置监听源码变更的目录  -&gt;  这个目录中的文件变更后会自动重启</span></span><br><span class="line">      <span class="attr">additional-paths:</span> <span class="string">src/main/java</span></span><br><span class="line">      <span class="comment">#设置classpath目录下的WEB-INF目录下的文件不会被监听，修改不会自动重启</span></span><br><span class="line">      <span class="attr">exclude:</span> <span class="string">static/**</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/boke?allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>  <span class="comment">#特别指定数据源类型，默认是HikariCP，现在变成druid</span></span><br><span class="line">    <span class="comment"># 连接池配置</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment"># 初始化大小，最小，最大</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存时间</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="comment">#用来验证从连接池中取出的连接是否有效,test-while-idle 为 true，那么 validation-query 参数必须设置为非空字符串，否则会报错。</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br><span class="line">      <span class="comment">#如果设置为 true，则会在连接空闲时检查数据库连接是否仍然有效</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#申请连接时会执行validation-query检测是否有效，开启后，会有性能影响，默认为 true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment">#归还连接时会执行validation-query检测是否有效，开启后，会有性能影响，默认为 true</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 打开 PSCache，并且指定每个连接上 PSCache 的大小</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">-1</span></span><br><span class="line">      <span class="comment"># 配置监控统计拦截的 Filter，去掉后监控界面 SQL 无法统计，wall 用于防火墙</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">      <span class="comment"># 通过 connection-properties 属性打开 mergeSql 功能；慢 SQL 记录</span></span><br><span class="line">      <span class="attr">connection-properties:</span> <span class="string">druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000</span></span><br><span class="line">      <span class="comment"># 配置 DruidStatFilter</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="comment"># 是否启用 DruidStatFilter 默认值为 true</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 添加过滤规则，多个过滤规则使用逗号分隔</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="comment"># 忽略 SQL 中包含的 filter 规则</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*</span></span><br><span class="line">      <span class="comment"># 配置 DruidStatViewServlet</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="comment">#是否启用StatViewServlet默认值为true</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#访问路径为/druid/* , 跳转到StatViewServlet</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="comment"># IP 白名单，没有配置或者为空，则允许所有访问</span></span><br><span class="line">        <span class="attr">allow:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="comment"># IP 黑名单，若白名单也存在，则优先使用</span></span><br><span class="line">        <span class="attr">deny:</span></span><br><span class="line">        <span class="comment"># 禁用 HTML 中 Reset All 按钮</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 登录用户名/密码</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">*****</span>    <span class="comment">##换成自己的</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">*****</span>   <span class="comment">#换成自己的</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-location:</span> <span class="string">classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,classpath:web/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务调度器</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#开启SQL语句打印</span></span><br><span class="line"><span class="comment"># 阿里云oss</span></span><br><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">**********************</span>    <span class="comment">#换成自己的</span></span><br><span class="line">    <span class="attr">accessKeyId:</span> <span class="string">**********************</span>      <span class="comment">#换成自己的</span></span><br><span class="line">    <span class="attr">accessKeySecret:</span> <span class="string">**********************</span>     <span class="comment">#换成自己的 </span></span><br><span class="line">    <span class="attr">bucketName:</span> <span class="string">frist-test</span><span class="comment">#换成自己的</span></span><br></pre></td></tr></table></figure><p><strong>创建一个配置类OSSConfig，用于读取配置文件中的 OSS 配置信息：</strong></p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OSSConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-bean类以及dao类"><a href="#4-bean类以及dao类" class="headerlink" title="4.bean类以及dao类"></a>4.bean类以及dao类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;ossimage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ossimage</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;,type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OssimageMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Ossimage&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM ossimage&quot;)</span></span><br><span class="line">    List&lt;Ossimage&gt; <span class="title function_">selectAllIamge</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-服务类-面向接口"><a href="#5-服务类-面向接口" class="headerlink" title="5.服务类(面向接口)"></a>5.服务类(面向接口)</h3><p><strong>OSS服务中的文件上传用以存储图片：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FileService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> files</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile[] files)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">FileService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OSSConfig ossConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件到OSS，单文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span>  <span class="comment">//异步上传</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="comment">//获取阿里云OSS参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> ossConfig.getEndpoint();</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> ossConfig.getAccessKeyId();</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> ossConfig.getAccessKeySecret();</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> ossConfig.getBucketName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传文件到 OSS</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);<span class="comment">//创建OSS客户端</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();   <span class="comment">//获取上传文件的原始名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>)); <span class="comment">//生成一个随机的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> <span class="string">&quot;uploads/&quot;</span> + fileName;  <span class="comment">//上传到OSS中的文件名称</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ossClient.putObject(bucketName, objectName, file.getInputStream());<span class="comment">//上传文件到OSS</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;文件上传失败：&quot;</span>+e.getMessage());</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            ossClient.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;https://&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint + <span class="string">&quot;/&quot;</span> + objectName;</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.completedFuture(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * OSS批量上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> files</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile[] files)</span> &#123;</span><br><span class="line">        List&lt;String&gt; urls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile file : files)&#123;</span><br><span class="line">            CompletableFuture&lt;String&gt; fileUrlFuture = upload(file);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                urls.add(fileUrlFuture.get());</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;文件上传失败：&quot;</span>+e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> urls;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务类：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OssimageBiz</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上新菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ossimage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">addOssImage</span><span class="params">(Ossimage ossimage)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Ossimage&gt; <span class="title function_">getAllOssImage</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssimageBizImpl</span> <span class="keyword">implements</span> <span class="title class_">OssimageBiz</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OssimageMapper ossimageMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">            propagation = Propagation.SUPPORTS, // 事务的传播行为，支持当前事务调用其他事务方法</span></span><br><span class="line"><span class="meta">            isolation = Isolation.DEFAULT,  // 事务的隔离级别，默认值为Isolation.DEFAULT</span></span><br><span class="line"><span class="meta">            timeout = 2000, // 事务的超时时间，单位为毫秒</span></span><br><span class="line"><span class="meta">            readOnly = false,</span></span><br><span class="line"><span class="meta">            rollbackFor = RuntimeException.class    // 事务回滚的异常类型</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">addOssImage</span><span class="params">(Ossimage ossimage)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.ossimageMapper.insert(ossimage);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Ossimage&gt; <span class="title function_">getAllOssImage</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Ossimage&gt; result = <span class="built_in">this</span>.ossimageMapper.selectAllIamge();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-工具类"><a href="#6-工具类" class="headerlink" title="6.工具类"></a>6.工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssimageVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span> <span class="comment">// 忽略该字段，不进行序列化,在json序列化时不包含该字段</span></span><br><span class="line">    <span class="keyword">private</span> MultipartFile fphotofile;   <span class="comment">// 上传的文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>响应类（用于返回前端的信息存储）</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span>    <span class="comment">//lombok的建造者模式 相当于生成一个构造函器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseResult</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">ok</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.builder().code(<span class="number">1</span>).msg(message).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.builder().code(<span class="number">1</span>).msg(<span class="string">&quot;成功&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">error</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.builder().code(<span class="number">0</span>).msg(message).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.builder().code(<span class="number">0</span>).msg(<span class="string">&quot;失败&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; ResponseResult <span class="title function_">setData</span><span class="params">(T obj)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-控制器"><a href="#7-控制器" class="headerlink" title="7.控制器"></a>7.控制器</h3><p><strong>创建一个控制器，用于处理图片上传和查找的请求：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;ossimage&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssimageController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OssimageBiz ossimageBiz;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileService fileService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;addOssImage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">addOssImage</span><span class="params">(<span class="meta">@ModelAttribute</span> OssimageVO ossimageVO)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fphotoFilePath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        CompletableFuture&lt;String&gt; fileUrlFuture = fileService.upload(ossimageVO.getFphotofile());</span><br><span class="line">        fphotoFilePath = fileUrlFuture.get();</span><br><span class="line"></span><br><span class="line">        <span class="type">Ossimage</span> <span class="variable">ossimage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ossimage</span>();</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(ossimageVO, ossimage);<span class="comment">//VO -&gt; PO PO是数据库中的表结构，VO是页面显示的，fid是数据库中的</span></span><br><span class="line"></span><br><span class="line">        ossimage.setImage(fphotoFilePath);</span><br><span class="line">        <span class="type">int</span> <span class="variable">fid</span> <span class="operator">=</span> <span class="built_in">this</span>.ossimageBiz.addOssImage(ossimage);</span><br><span class="line"></span><br><span class="line">        ossimageVO.setId(fid);  <span class="comment">//VO是 前端显示的，fid是数据库中的</span></span><br><span class="line">        ossimageVO.setImage(fphotoFilePath);<span class="comment">//OSS中的文件路径存入VO中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.builder().code(<span class="number">1</span>).msg(<span class="string">&quot;上传成功&quot;</span>).build().setData(ossimageVO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;getOssImage&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getOssImage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//查找所有图片</span></span><br><span class="line">        List&lt;Ossimage&gt; ossimage = <span class="built_in">this</span>.ossimageBiz.getAllOssImage();</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.builder().code(<span class="number">1</span>).msg(<span class="string">&quot;查询成功&quot;</span>).build().setData(ossimage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-使用Postman测试"><a href="#8-使用Postman测试" class="headerlink" title="8.使用Postman测试"></a>8.使用Postman测试</h3><p><img src="/boke_image/QQ20240911-164131.png" alt="QQ20240911-164131"></p><p><img src="/boke_image/QQ20240911-164200.png" alt="QQ20240911-164200"></p><p><strong>若是没有Postman工具可以使用建一个简单的前端页面(index.html):</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>oss测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    测试</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in image&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.image&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">image</span>: [],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getImage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>  axios.<span class="title function_">get</span>(<span class="string">&quot;ossimage/getOssImage&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">all</span>([<span class="variable language_">this</span>.<span class="title function_">getImage</span>()]).<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">spread</span>(<span class="function">(<span class="params">d1</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (d1.<span class="property">data</span>.<span class="property">code</span>==<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">image</span> = d1.<span class="property">data</span>.<span class="property">obj</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            );</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过以上步骤，我们成功地在 Spring Boot3+MyBatis-Plus 项目中集成了阿里云 OSS，实现了图片的上传和存储。这样不仅可以减轻服务器的存储压力，还能提高图片的访问速度和可靠性。</p><p>希望这篇文章对你有所帮助！如果有任何问题或建议，欢迎在评论区留言。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring与springboot集成消息代理ActiveM</title>
      <link href="/2024/09/09/spring%E4%B8%8Espringboot%E9%9B%86%E6%88%90%E6%B6%88%E6%81%AF%E4%BB%A3%E7%90%86ActiveMQ/"/>
      <url>/2024/09/09/spring%E4%B8%8Espringboot%E9%9B%86%E6%88%90%E6%B6%88%E6%81%AF%E4%BB%A3%E7%90%86ActiveMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="spring与springboot集成消息代理ActiveMQ"><a href="#spring与springboot集成消息代理ActiveMQ" class="headerlink" title="spring与springboot集成消息代理ActiveMQ"></a>spring与springboot集成消息代理ActiveMQ</h1><p>在现代分布式系统中，消息队列扮演着至关重要的角色。它们能够实现异步通信、解耦和削峰填谷等功能，提升系统的可靠性和性能。本文将介绍如何在Spring和Spring Boot中集成ActiveMQ，实现消息的发送和接收。</p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>在开始之前，确保你已经安装了以下环境：</p><p>​JDK 11<br>​Maven 3.2.8<br>​ActiveMQ 5.18.5</p><h4 id="下载和安装ActiveMQ"><a href="#下载和安装ActiveMQ" class="headerlink" title="下载和安装ActiveMQ"></a>下载和安装ActiveMQ</h4><p>首先，需要下载和安装ActiveMQ。可以从官方网站下载最新版本的ActiveMQ：（<strong>注意版本对应</strong>）<a href="http://activemq.apache.org/">(https://activemq.apache.org/)</a>.</p><h4 id="启动ActiveMQ"><a href="#启动ActiveMQ" class="headerlink" title="启动ActiveMQ"></a>启动ActiveMQ</h4><p>安装完成后，通过命令行或启动脚本启动ActiveMQ。在命令行中导航到ActiveMQ安装目录的<code>bin</code>文件夹，然后执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">activemq start</span><br></pre></td></tr></table></figure><p>启动后可以在浏览器输入:<a href="http://127.0.0.1:8161/">http://127.0.0.1:8161/</a> 打开ActiveMQ的web控制台。</p><h4 id="停止-ActiveMQ-服务："><a href="#停止-ActiveMQ-服务：" class="headerlink" title="停止 ActiveMQ 服务："></a><strong>停止 ActiveMQ 服务</strong>：</h4><p>如果是在 Windows 系统上，可以进入 ActiveMQ 的安装目录的<code>bin</code>文件夹，然后执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">activemq stop</span><br></pre></td></tr></table></figure><h3 id="spring中集成ActiveMQ："><a href="#spring中集成ActiveMQ：" class="headerlink" title="spring中集成ActiveMQ："></a>spring中集成ActiveMQ：</h3><h4 id="引入依赖："><a href="#引入依赖：" class="headerlink" title="引入依赖："></a>引入依赖：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Core 和 Spring JMS 相关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 版本号根据你的实际需求和Spring版本进行调整 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ActiveMQ 相关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.18.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 版本号根据你的实际需求和ActiveMQ版本进行调整 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置类："><a href="#配置类：" class="headerlink" title="配置类："></a>配置类：</h4><p>JMS (Java Message Service) 支持两种主要的消息传递模式：</p><ol><li><strong>点对点（Queue）模式</strong>：<ul><li><strong>生产者</strong>将消息发送到一个<strong>队列</strong>。</li><li><strong>消费者</strong>从队列中接收消息。</li><li>消息被发送到一个特定的队列中，只能由一个消费者接收，确保消息的独占处理。</li></ul></li><li><strong>发布&#x2F;订阅（Topic）模式</strong>：<ul><li><strong>生产者</strong>将消息发布到一个<strong>主题</strong>。</li><li><strong>多个消费者</strong>可以订阅这个主题并接收消息。</li><li>消息被广播到所有订阅了该主题的消费者，确保消息的广播处理。</li></ul></li></ol><p>这两种模式各有不同的适用场景，根据需求选择合适的模式可以优化消息传递的效率和灵活性。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.annotation.EnableJms;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.config.DefaultJmsListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.config.JmsListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJms</span> <span class="comment">//在 Spring 应用程序中启用 JMS（Java Message Service）相关的功能和配置</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.zxb.jms&quot;&#125;)</span> <span class="comment">// 扫包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JmsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置连接工厂</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConnectionFactory <span class="title function_">connectionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ActiveMQConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>();</span><br><span class="line">        connectionFactory.setBrokerURL(<span class="string">&quot;tcp://localhost:61616&quot;</span>);<span class="comment">// ActiveMQ 代理地址</span></span><br><span class="line">        <span class="keyword">return</span>  connectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置 JmsTemplate jms模板：消息发送 消息接收  消息转换 连接和会话管理</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JmsTemplate <span class="title function_">jmsTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="type">JmsTemplate</span> <span class="variable">jmsTemplate</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">JmsTemplate</span>();</span><br><span class="line">        jmsTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line"><span class="comment">//        jmsTemplate.setPubSubDomain(true); // 默认为 点对点（Queue）模式  设置为true表示发布/订阅（Topic）模式</span></span><br><span class="line">        <span class="keyword">return</span> jmsTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置消息监听器容器工厂</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JmsListenerContainerFactory&lt;?&gt; jmsListenerContainerFactory(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">        <span class="type">DefaultJmsListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultJmsListenerContainerFactory</span>();</span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line"><span class="comment">//        factory.setPubSubDomain(true); // 默认为点对点（Queue）模式  设置为true表示发布/订阅（Topic）模式</span></span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息生产者："><a href="#消息生产者：" class="headerlink" title="消息生产者："></a>消息生产者：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate; <span class="comment">// 注入 JmsTemplate 实例</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        jmsTemplate.convertAndSend(<span class="string">&quot;myQueue&quot;</span>, message);<span class="comment">// 发送消息到队列</span></span><br><span class="line">        System.out.println(<span class="string">&quot;发送的消息为: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息消费者："><a href="#消息消费者：" class="headerlink" title="消息消费者："></a>消息消费者：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jms.annotation.JmsListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;myQueue&quot;)</span> <span class="comment">// 监听myQueue消息队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户接收到的消息: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(JmsConfig.class);</span><br><span class="line">        <span class="type">MessageProducer</span> <span class="variable">mp</span> <span class="operator">=</span> (MessageProducer) ac.getBean(<span class="string">&quot;messageProducer&quot;</span>);</span><br><span class="line">        mp.sendMessage(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot整合ActiveMQ"><a href="#Spring-Boot整合ActiveMQ" class="headerlink" title="Spring Boot整合ActiveMQ"></a>Spring Boot整合ActiveMQ</h3><h3 id="1-引入依赖："><a href="#1-引入依赖：" class="headerlink" title="1.引入依赖："></a>1.引入依赖：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.14.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://localhost:61616</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">in-memory:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">queueName:</span> <span class="string">bankMessages</span>   <span class="comment"># 消息队列名称$&#123;spring.activemq.queueName&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-创建配置类"><a href="#3-创建配置类" class="headerlink" title="3. 创建配置类"></a>3. 创建配置类</h3><p>创建<code>ActiveMQConfig</code>配置类，读取<code>application.yml</code>中的配置并创建队列对象：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActiveMQConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.activemq.broker-url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String brokerUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.activemq.user&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.activemq.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.activemq.queueName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String queueName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveMQQueue</span>(queueName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConnectionFactory <span class="title function_">connectionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(userName, password, brokerUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JmsListenerContainerFactory&lt;?&gt; queueListenerContainerFactory(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">        <span class="type">SimpleJmsListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleJmsListenerContainerFactory</span>();</span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line">        factory.setPubSubDomain(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-创建消息生产者"><a href="#4-创建消息生产者" class="headerlink" title="4. 创建消息生产者"></a>4. 创建消息生产者</h3><p>创建一个控制器类，用于发送消息到队列：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Queue queue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(<span class="meta">@RequestBody</span> String message)</span> &#123;</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(queue, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-创建消息消费者"><a href="#5-创建消息消费者" class="headerlink" title="5. 创建消息消费者"></a>5. 创建消息消费者</h3><p>创建一个监听器类，用于接收队列中的消息：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerListener</span> &#123;</span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;$&#123;spring.activemq.queue-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Received message: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>集成 ActiveMQ 与 Spring 结合使用，可以显著提高消息处理的效率和简化开发过程，同时利用 Spring 提供的功能增强应用程序的灵活性和可靠性。这种集成不仅提升了消息传递的功能，还简化了配置和管理,Spring Boot项目中集成了ActiveMQ，实现了消息的发送和接收。ActiveMQ作为一个强大的消息代理，能够帮助我们构建高效、可靠的分布式系统。</p>]]></content>
      
      
      <categories>
          
          <category> spirngboot3 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
